{"version":3,"file":"static/js/994.2d658564.chunk.js","mappings":"6PAOe,SAASA,EAAWC,GAClC,IAAD,EACI,GAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAoCJ,EAAAA,EAAAA,UAAS,MAA7C,eAAOK,EAAP,KAAmBC,EAAnB,KACA,GAAsCN,EAAAA,EAAAA,UAAS,MAA/C,eAAOO,EAAP,KAAoBC,EAApB,KAGIC,GAASC,EAAAA,EAAAA,MACTC,GAAWC,EAAAA,EAAAA,MAoCf,OAlCAC,EAAAA,EAAAA,YAAU,WAAM,8CACZ,kGAEIT,GAAa,GAFjB,UAG2BU,EAAAA,EAAAA,IAAWL,EAAOM,YAAR,UAAqBN,EAAOO,kBAA5B,QAA0C,IAH/E,QAGUC,EAHV,QAIgBC,IACRhB,EAAWe,EAASE,MAExBf,GAAa,GAPjB,4CADY,oEAWZ,0GAE2BgB,EAAAA,EAAAA,IAAeX,EAAOM,aAFjD,QAEUE,EAFV,QAGgBC,IACRV,EAAeS,EAASE,KAAKE,QAJrC,4CAXY,oEAkBZ,0GAE2BC,EAAAA,EAAAA,MAF3B,QAEUL,EAFV,QAGgBC,IACRZ,EAAcW,EAASE,KAAKE,QAJpC,4CAlBY,0DAyBZE,GAEGd,EAAOM,cA3BG,WAAD,wBA6BRS,GA7BQ,mCA8BRC,MAEL,CAAChB,KAEG,4BACH,eAAIiB,UAAU,OAAd,6BACA,kBAAMA,UAAU,eAAhB,WACI,gBAAKA,UAAU,WAAf,UACI,oBAAQA,UAAU,cAAcC,SAAU,SAACC,GAAD,OAAQjB,EAAS,IAAD,OAAKkB,EAAAA,EAAAA,OAAL,YAAyBD,EAAGE,OAAOC,SACrFC,UAAW3B,EAAY0B,MAAOtB,EAAOM,YAAakB,UAAQ,EADlE,WAEI,mBAAQF,MAAM,GAAd,4BAFJ,OAGK1B,QAHL,IAGKA,OAHL,EAGKA,EAAY6B,KAAI,SAAAC,GAAC,OAAI,mBAAgBJ,MAAOI,EAAvB,SAA2BA,GAAdA,YAG3C,gBAAKT,UAAU,WAAf,UACI,oBAAQA,UAAU,cAAcC,SAAU,SAACC,GAAQjB,EAAS,IAAD,OAAKkB,EAAAA,EAAAA,OAAL,YAAyBpB,EAAOM,YAAhC,YAA+Ca,EAAGE,OAAOC,SAC5GC,UAAWzB,EAAawB,MAAK,UAAEtB,EAAOO,kBAAT,QAAuB,GAD5D,WAEI,mBAAQe,MAAM,GAAd,qBAFJ,OAGKxB,QAHL,IAGKA,OAHL,EAGKA,EAAa2B,KAAI,SAAAC,GAAC,OAAI,mBAAgBJ,MAAOI,EAAvB,SAA2BA,GAAdA,cAI/ChC,IAAa,SAAC,IAAD,CAASuB,UAAU,+BACjC,eAAIA,UAAU,aAAd,gBACKzB,QADL,IACKA,OADL,EACKA,EAASiC,KAAI,SAAAC,GAAC,OAAI,cAAGT,UAAU,yCACEU,KAAI,WAAMP,EAAAA,EAAAA,OAAN,YAA0BM,EAAEE,KAD/C,UAEf,SAAC,IAAD,CAAmBC,OAAQH,KADJA,EAAEE","sources":["Pages/BrowsePage.js"],"sourcesContent":["import {useParams, useNavigate} from \"react-router-dom\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {GetCourseCodes, GetCourses, GetDayName, GetFacultyCodes} from \"../CourseAPI\";\r\nimport Spinner from \"../Components/Spinner\";\r\nimport Endpoints from \"../Endpoints\";\r\nimport CourseDetailsCard from \"../Components/CourseDetailsCard\";\r\n\r\nexport default function BrowsePage(props)\r\n{\r\n    const [courses, setCourses] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [majorCodes, setMajorCodes] = useState(null);\r\n    const [courseCodes, setCourseCodes] = useState(null);\r\n    const timeOptions = { hour: '2-digit', minute: '2-digit' };\r\n\r\n    let params = useParams();\r\n    let navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        async function fetchCourses()\r\n        {\r\n            setIsLoading(true);\r\n            const response = await GetCourses(params.facultyCode, params.courseCode ?? \"\");\r\n            if(response.ok)\r\n                setCourses(response.data);\r\n\r\n            setIsLoading(false);\r\n        }\r\n\r\n        async function fetchCourseCodes()\r\n        {\r\n            const response = await GetCourseCodes(params.facultyCode);\r\n            if(response.ok)\r\n                setCourseCodes(response.data.sort());\r\n        }\r\n\r\n        async function fetchMajorCodes()\r\n        {\r\n            const response = await GetFacultyCodes();\r\n            if(response.ok)\r\n                setMajorCodes(response.data.sort());\r\n        }\r\n\r\n        fetchMajorCodes();\r\n\r\n        if(params.facultyCode)\r\n        {\r\n            fetchCourses();\r\n            fetchCourseCodes();\r\n        }\r\n    }, [params]);\r\n\r\n    return <div>\r\n        <h2 className=\"mb-3\">Browse Courses</h2>\r\n        <form className=\"row g-3 mb-3\">\r\n            <div className=\"col-md-3\">\r\n                <select className=\"form-select\" onChange={(ev) => navigate(`/${Endpoints.Browse}/${ev.target.value}`)}\r\n                        disabled={!majorCodes} value={params.facultyCode} required>\r\n                    <option value=\"\">Select a Major</option>\r\n                    {majorCodes?.map(x => <option key={x} value={x}>{x}</option>)}\r\n                </select>\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n                <select className=\"form-select\" onChange={(ev) => {navigate(`/${Endpoints.Browse}/${params.facultyCode}/${ev.target.value}`)}}\r\n                        disabled={!courseCodes} value={params.courseCode ?? \"\"}>\r\n                    <option value=\"\">Get All</option>\r\n                    {courseCodes?.map(x => <option key={x} value={x}>{x}</option>)}\r\n                </select>\r\n            </div>\r\n        </form>\r\n        {isLoading && <Spinner className=\"mb-3 mx-auto text-primary\"/>}\r\n        <ul className=\"list-group\">\r\n            {courses?.map(x => <a className=\"list-group-item list-group-item-action\"\r\n                                  key={x.crn} href={`/${Endpoints.Course}/${x.crn}`}>\r\n                <CourseDetailsCard course={x}/>\r\n            </a>)}\r\n        </ul>\r\n    </div>;\r\n}"],"names":["BrowsePage","props","useState","courses","setCourses","isLoading","setIsLoading","majorCodes","setMajorCodes","courseCodes","setCourseCodes","params","useParams","navigate","useNavigate","useEffect","GetCourses","facultyCode","courseCode","response","ok","data","GetCourseCodes","sort","GetFacultyCodes","fetchMajorCodes","fetchCourses","fetchCourseCodes","className","onChange","ev","Endpoints","target","value","disabled","required","map","x","href","crn","course"],"sourceRoot":""}